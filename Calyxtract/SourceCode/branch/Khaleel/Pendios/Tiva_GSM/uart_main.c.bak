/*
 * UART0 ANd UART2 testing code.
 * */


#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_ints.h"
#include "inc/hw_memmap.h"
#include "driverlib/debug.h"
#include "driverlib/gpio.h"
#include "driverlib/interrupt.h"
#include "driverlib/pin_map.h"
#include "driverlib/rom.h"
#include "driverlib/rom_map.h"
#include "driverlib/sysctl.h"
#include "driverlib/uart.h"
#include "utils/uartstdio.h"
#include "utils/uartstdio.c"

#include "inc/RS_232.h"
#include "inc/dbg.h"

//****************************************************************************
//
// System clock rate in Hz.
//
//****************************************************************************
uint32_t g_ui32SysClock;

//*****************************************************************************
//
// The error routine that is called if the driver library encounters an error.
//
//*****************************************************************************
#ifdef DEBUG
void
__error__(char *pcFilename, uint32_t ui32Line)
{
}
#endif

//void
//InitConsole(void)
//{
//    //
//    // Enable GPIO port A which is used for UART0 pins.
//    // TODO: change this to whichever GPIO port you are using.
//    //
//    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
//
//    //
//    // Configure the pin muxing for UART0 functions on port A0 and A1.
//    // This step is not necessary if your part does not support pin muxing.
//    // TODO: change this to select the port/pin you are using.
//    //
//    GPIOPinConfigure(GPIO_PA0_U0RX);
//    GPIOPinConfigure(GPIO_PA1_U0TX);
//
//    //
//    // Enable UART0 so that we can configure the clock.
//    //
//    SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);
//
//    //
//    // Use the internal 16MHz oscillator as the UART clock source.
//    //
//    UARTClockSourceSet(UART0_BASE, UART_CLOCK_PIOSC);
//
//    //
//    // Select the alternate (UART) function for these pins.
//    // TODO: change this to select the port/pin you are using.
//    //
//    GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1);
//
//    //
//    // Initialize the UART for console I/O.
//    //
//    UARTStdioConfig(0, 115200, 16000000);
//}


//void
//InitConsole(void)
//{
//    //
//    // Enable GPIO port A which is used for UART0 pins.
//    // TODO: change this to whichever GPIO port you are using.
//    //
//    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
//
//    //
//    // Configure the pin muxing for UART0 functions on port A0 and A1.
//    // This step is not necessary if your part does not support pin muxing.
//    // TODO: change this to select the port/pin you are using.
//    //
//    GPIOPinConfigure(GPIO_PA6_U2RX);
//    GPIOPinConfigure(GPIO_PA7_U2TX);
//
//    //
//    // Enable UART0 so that we can configure the clock.
//    //
//    SysCtlPeripheralEnable(SYSCTL_PERIPH_UART2);
//
//    //
//    // Use the internal 16MHz oscillator as the UART clock source.
//    //
//    UARTClockSourceSet(UART2_BASE, UART_CLOCK_PIOSC);
//
//    //
//    // Select the alternate (UART) function for these pins.
//    // TODO: change this to select the port/pin you are using.
//    //
//    GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_6 | GPIO_PIN_7);
//
//    //
//    // Initialize the UART for console I/O.
//    //
//    UARTStdioConfig(2, 115200, 16000000);
//}

/*void UART0_init(void)
{
       //
       // Enable the peripherals used by this example.
       //
       ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);
       ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);


       //
       // Set GPIO A0 and A1 as UART pins.
       //
       GPIOPinConfigure(GPIO_PA0_U0RX);
       GPIOPinConfigure(GPIO_PA1_U0TX);
       ROM_GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1);

       // Use the internal 16MHz oscillator as the UART clock source.
       //
       UARTClockSourceSet(UART0_BASE, UART_CLOCK_PIOSC);
       //

       // Configure the UART for 115,200, 8-N-1 operation.
       //
       ROM_UARTConfigSetExpClk(UART0_BASE, 16000000, 115200,
                               (UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE |
                                UART_CONFIG_PAR_NONE));
}

void UART2_init(void)
{
    //
       // Enable GPIO port A which is used for UART0 pins.
       // TODO: change this to whichever GPIO port you are using.
       //
       SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);

       //
       // Configure the pin muxing for UART0 functions on port A0 and A1.
       // This step is not necessary if your part does not support pin muxing.
       // TODO: change this to select the port/pin you are using.
       //
       GPIOPinConfigure(GPIO_PA6_U2RX);
       GPIOPinConfigure(GPIO_PA7_U2TX);

       //
       // Enable UART0 so that we can configure the clock.
       //
       SysCtlPeripheralEnable(SYSCTL_PERIPH_UART2);

       //
       // Use the internal 16MHz oscillator as the UART clock source.
       //
       UARTClockSourceSet(UART2_BASE, UART_CLOCK_PIOSC);

       //
       // Select the alternate (UART) function for these pins.
       // TODO: change this to select the port/pin you are using.
       //
       GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_6 | GPIO_PIN_7);

       //
       // Initialize the UART for console I/O.
       //
       UARTStdioConfig(2, 115200, 16000000);
}*/

//*****************************************************************************
//
// This example demonstrates how to send a string of data to the UART.
//
//*****************************************************************************
int
main(void)
{

    //
    // Set the clocking to run directly from the crystal at 120MHz.
    //
   SysCtlClockFreqSet((SYSCTL_XTAL_25MHZ |SYSCTL_OSC_MAIN |SYSCTL_USE_PLL  |SYSCTL_CFG_VCO_480), 120000000);
    //SysCtlClockSet(SYSCTL_SYSDIV_2_5|SYSCTL_USE_PLL|SYSCTL_OSC_MAIN|SYSCTL_XTAL_16MHZ);
   rs232_init(3);
   dbg_printf("Debug printf working UART0\n");
    //
    // Prompt for text to be entered.
    //
    UARTprintf("**** HELLO WORLD UART2 ####\n");
    //dbg_printf("Debug printf working UART2\n");

    while(1)
    {
                UARTprintf("- FHT -UART2\n");
                SysCtlDelay(8000000);
                SysCtlDelay(8000000);
                dbg_printf("Debug printf workingUART0\n");
                SysCtlDelay(8000000);
                SysCtlDelay(8000000);

}

}
