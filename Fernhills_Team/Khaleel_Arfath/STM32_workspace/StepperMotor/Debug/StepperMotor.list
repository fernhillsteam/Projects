
StepperMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000284  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000418  08000418  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000418  08000418  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000418  08000418  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000418  08000418  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000418  08000418  00010418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800041c  0800041c  0001041c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000420  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000424  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000424  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000015ba  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000057f  00000000  00000000  000215ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c8  00000000  00000000  00021b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000180  00000000  00000000  00021d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013ada  00000000  00000000  00021eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001f1a  00000000  00000000  00035992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007da4f  00000000  00000000  000378ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b52fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000550  00000000  00000000  000b5350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000400 	.word	0x08000400

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000400 	.word	0x08000400

080001d4 <main>:
  ******************************************************************************
  */
#include "stm32f4xx.h"

void delayMs(int n);
int main(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
//    const char steps[ ] = {0x90, 0x30, 0x60, 0xC0};
//    int i;

    /* PTA7, 6, 5, 4 for motor control */
    RCC->AHB1ENR |=  1;	            /* enable GPIOA clock */
 80001d8:	4b29      	ldr	r3, [pc, #164]	; (8000280 <main+0xac>)
 80001da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001dc:	4a28      	ldr	r2, [pc, #160]	; (8000280 <main+0xac>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOA->MODER &= ~0x0000FF00;    /* clear pin mode */
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <main+0xb0>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a26      	ldr	r2, [pc, #152]	; (8000284 <main+0xb0>)
 80001ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80001ee:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  0x00005500;    /* set pins to output mode */
 80001f0:	4b24      	ldr	r3, [pc, #144]	; (8000284 <main+0xb0>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a23      	ldr	r2, [pc, #140]	; (8000284 <main+0xb0>)
 80001f6:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 80001fa:	6013      	str	r3, [r2, #0]

    for (;;) {


    	GPIOA->ODR |= (1<<4)|(1<<7);  /* turn on LED */
 80001fc:	4b21      	ldr	r3, [pc, #132]	; (8000284 <main+0xb0>)
 80001fe:	695b      	ldr	r3, [r3, #20]
 8000200:	4a20      	ldr	r2, [pc, #128]	; (8000284 <main+0xb0>)
 8000202:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8000206:	6153      	str	r3, [r2, #20]
    	GPIOA->ODR &= ~((1<<5)|(1<<6));  /* turn off LED */
 8000208:	4b1e      	ldr	r3, [pc, #120]	; (8000284 <main+0xb0>)
 800020a:	695b      	ldr	r3, [r3, #20]
 800020c:	4a1d      	ldr	r2, [pc, #116]	; (8000284 <main+0xb0>)
 800020e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000212:	6153      	str	r3, [r2, #20]
    	delayMs(500);
 8000214:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000218:	f000 f836 	bl	8000288 <delayMs>
    	GPIOA->ODR |= (1<<4)|(1<<5);  /* turn on LED */
 800021c:	4b19      	ldr	r3, [pc, #100]	; (8000284 <main+0xb0>)
 800021e:	695b      	ldr	r3, [r3, #20]
 8000220:	4a18      	ldr	r2, [pc, #96]	; (8000284 <main+0xb0>)
 8000222:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000226:	6153      	str	r3, [r2, #20]
    	GPIOA->ODR &= ~((1<<7)|(1<<6));  /* turn off LED */
 8000228:	4b16      	ldr	r3, [pc, #88]	; (8000284 <main+0xb0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	4a15      	ldr	r2, [pc, #84]	; (8000284 <main+0xb0>)
 800022e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000232:	6153      	str	r3, [r2, #20]
    	delayMs(500);
 8000234:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000238:	f000 f826 	bl	8000288 <delayMs>
    	GPIOA->ODR |= (1<<5)|(1<<6);  /* turn on LED */
 800023c:	4b11      	ldr	r3, [pc, #68]	; (8000284 <main+0xb0>)
 800023e:	695b      	ldr	r3, [r3, #20]
 8000240:	4a10      	ldr	r2, [pc, #64]	; (8000284 <main+0xb0>)
 8000242:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000246:	6153      	str	r3, [r2, #20]
    	GPIOA->ODR &= ~((1<<4)|(1<<7));  /* turn off LED */
 8000248:	4b0e      	ldr	r3, [pc, #56]	; (8000284 <main+0xb0>)
 800024a:	695b      	ldr	r3, [r3, #20]
 800024c:	4a0d      	ldr	r2, [pc, #52]	; (8000284 <main+0xb0>)
 800024e:	f023 0390 	bic.w	r3, r3, #144	; 0x90
 8000252:	6153      	str	r3, [r2, #20]
    	delayMs(500);
 8000254:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000258:	f000 f816 	bl	8000288 <delayMs>
    	GPIOA->ODR |= (1<<6)|(1<<7);  /* turn on LED */
 800025c:	4b09      	ldr	r3, [pc, #36]	; (8000284 <main+0xb0>)
 800025e:	695b      	ldr	r3, [r3, #20]
 8000260:	4a08      	ldr	r2, [pc, #32]	; (8000284 <main+0xb0>)
 8000262:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000266:	6153      	str	r3, [r2, #20]
    	GPIOA->ODR &= ~((1<<5)|(1<<4));  /* turn off LED */
 8000268:	4b06      	ldr	r3, [pc, #24]	; (8000284 <main+0xb0>)
 800026a:	695b      	ldr	r3, [r3, #20]
 800026c:	4a05      	ldr	r2, [pc, #20]	; (8000284 <main+0xb0>)
 800026e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000272:	6153      	str	r3, [r2, #20]
    	delayMs(500);
 8000274:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000278:	f000 f806 	bl	8000288 <delayMs>
    	GPIOA->ODR |= (1<<4)|(1<<7);  /* turn on LED */
 800027c:	e7be      	b.n	80001fc <main+0x28>
 800027e:	bf00      	nop
 8000280:	40023800 	.word	0x40023800
 8000284:	40020000 	.word	0x40020000

08000288 <delayMs>:
    }
}
/* 16 MHz SYSCLK */
void delayMs(int n) {
 8000288:	b480      	push	{r7}
 800028a:	b085      	sub	sp, #20
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
    int i;
    for (; n > 0; n--)
 8000290:	e00d      	b.n	80002ae <delayMs+0x26>
        for (i = 0; i < 3195; i++) ;
 8000292:	2300      	movs	r3, #0
 8000294:	60fb      	str	r3, [r7, #12]
 8000296:	e002      	b.n	800029e <delayMs+0x16>
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	3301      	adds	r3, #1
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	f640 427a 	movw	r2, #3194	; 0xc7a
 80002a4:	4293      	cmp	r3, r2
 80002a6:	ddf7      	ble.n	8000298 <delayMs+0x10>
    for (; n > 0; n--)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	3b01      	subs	r3, #1
 80002ac:	607b      	str	r3, [r7, #4]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	dcee      	bgt.n	8000292 <delayMs+0xa>
}
 80002b4:	bf00      	nop
 80002b6:	bf00      	nop
 80002b8:	3714      	adds	r7, #20
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr

080002c2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002c2:	b480      	push	{r7}
 80002c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002c6:	e7fe      	b.n	80002c6 <NMI_Handler+0x4>

080002c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002cc:	e7fe      	b.n	80002cc <HardFault_Handler+0x4>

080002ce <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002ce:	b480      	push	{r7}
 80002d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002d2:	e7fe      	b.n	80002d2 <MemManage_Handler+0x4>

080002d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002d8:	e7fe      	b.n	80002d8 <BusFault_Handler+0x4>

080002da <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002da:	b480      	push	{r7}
 80002dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002de:	e7fe      	b.n	80002de <UsageFault_Handler+0x4>

080002e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002e4:	bf00      	nop
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr

080002ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002ee:	b480      	push	{r7}
 80002f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002f2:	bf00      	nop
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr

080002fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000300:	bf00      	nop
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr

0800030a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800030a:	b580      	push	{r7, lr}
 800030c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800030e:	f000 f83f 	bl	8000390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
	...

08000318 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800031c:	4b06      	ldr	r3, [pc, #24]	; (8000338 <SystemInit+0x20>)
 800031e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000322:	4a05      	ldr	r2, [pc, #20]	; (8000338 <SystemInit+0x20>)
 8000324:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000328:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800032c:	bf00      	nop
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	e000ed00 	.word	0xe000ed00

0800033c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800033c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000374 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000340:	480d      	ldr	r0, [pc, #52]	; (8000378 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000342:	490e      	ldr	r1, [pc, #56]	; (800037c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000344:	4a0e      	ldr	r2, [pc, #56]	; (8000380 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000348:	e002      	b.n	8000350 <LoopCopyDataInit>

0800034a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800034a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800034c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800034e:	3304      	adds	r3, #4

08000350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000354:	d3f9      	bcc.n	800034a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000356:	4a0b      	ldr	r2, [pc, #44]	; (8000384 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000358:	4c0b      	ldr	r4, [pc, #44]	; (8000388 <LoopFillZerobss+0x26>)
  movs r3, #0
 800035a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800035c:	e001      	b.n	8000362 <LoopFillZerobss>

0800035e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800035e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000360:	3204      	adds	r2, #4

08000362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000364:	d3fb      	bcc.n	800035e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000366:	f7ff ffd7 	bl	8000318 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800036a:	f000 f825 	bl	80003b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800036e:	f7ff ff31 	bl	80001d4 <main>
  bx  lr    
 8000372:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000374:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800037c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000380:	08000420 	.word	0x08000420
  ldr r2, =_sbss
 8000384:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000388:	20000024 	.word	0x20000024

0800038c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800038c:	e7fe      	b.n	800038c <ADC_IRQHandler>
	...

08000390 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000394:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <HAL_IncTick+0x20>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	461a      	mov	r2, r3
 800039a:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <HAL_IncTick+0x24>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4413      	add	r3, r2
 80003a0:	4a04      	ldr	r2, [pc, #16]	; (80003b4 <HAL_IncTick+0x24>)
 80003a2:	6013      	str	r3, [r2, #0]
}
 80003a4:	bf00      	nop
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	20000000 	.word	0x20000000
 80003b4:	20000020 	.word	0x20000020

080003b8 <__libc_init_array>:
 80003b8:	b570      	push	{r4, r5, r6, lr}
 80003ba:	4d0d      	ldr	r5, [pc, #52]	; (80003f0 <__libc_init_array+0x38>)
 80003bc:	4c0d      	ldr	r4, [pc, #52]	; (80003f4 <__libc_init_array+0x3c>)
 80003be:	1b64      	subs	r4, r4, r5
 80003c0:	10a4      	asrs	r4, r4, #2
 80003c2:	2600      	movs	r6, #0
 80003c4:	42a6      	cmp	r6, r4
 80003c6:	d109      	bne.n	80003dc <__libc_init_array+0x24>
 80003c8:	4d0b      	ldr	r5, [pc, #44]	; (80003f8 <__libc_init_array+0x40>)
 80003ca:	4c0c      	ldr	r4, [pc, #48]	; (80003fc <__libc_init_array+0x44>)
 80003cc:	f000 f818 	bl	8000400 <_init>
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	10a4      	asrs	r4, r4, #2
 80003d4:	2600      	movs	r6, #0
 80003d6:	42a6      	cmp	r6, r4
 80003d8:	d105      	bne.n	80003e6 <__libc_init_array+0x2e>
 80003da:	bd70      	pop	{r4, r5, r6, pc}
 80003dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e0:	4798      	blx	r3
 80003e2:	3601      	adds	r6, #1
 80003e4:	e7ee      	b.n	80003c4 <__libc_init_array+0xc>
 80003e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ea:	4798      	blx	r3
 80003ec:	3601      	adds	r6, #1
 80003ee:	e7f2      	b.n	80003d6 <__libc_init_array+0x1e>
 80003f0:	08000418 	.word	0x08000418
 80003f4:	08000418 	.word	0x08000418
 80003f8:	08000418 	.word	0x08000418
 80003fc:	0800041c 	.word	0x0800041c

08000400 <_init>:
 8000400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000402:	bf00      	nop
 8000404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000406:	bc08      	pop	{r3}
 8000408:	469e      	mov	lr, r3
 800040a:	4770      	bx	lr

0800040c <_fini>:
 800040c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040e:	bf00      	nop
 8000410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000412:	bc08      	pop	{r3}
 8000414:	469e      	mov	lr, r3
 8000416:	4770      	bx	lr
