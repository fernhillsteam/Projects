
UART_rx_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000028c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000420  08000420  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000420  08000420  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000420  08000420  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000420  08000420  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000420  08000420  00010420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000424  08000424  00010424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000428  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  0800042c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  0800042c  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000223a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000738  00000000  00000000  0002226e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e8  00000000  00000000  000229a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001a0  00000000  00000000  00022b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000142c6  00000000  00000000  00022d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002115  00000000  00000000  00036ff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080c4c  00000000  00000000  0003910b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b9d57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005dc  00000000  00000000  000b9dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000408 	.word	0x08000408

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000408 	.word	0x08000408

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	; (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <main>:
void USART2_WRITE( char* ch);
char GetChar(void);
void USART2_IRQHandler(void);

int main(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
USART_INIT();
 8000214:	f000 f802 	bl	800021c <USART_INIT>
	while(1)
 8000218:	e7fe      	b.n	8000218 <main+0x8>
	...

0800021c <USART_INIT>:
}

}

void USART_INIT(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
RCC->APB1ENR  |=0x20000;   				// Enabling APB1 Clock
 8000220:	4b19      	ldr	r3, [pc, #100]	; (8000288 <USART_INIT+0x6c>)
 8000222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000224:	4a18      	ldr	r2, [pc, #96]	; (8000288 <USART_INIT+0x6c>)
 8000226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800022a:	6413      	str	r3, [r2, #64]	; 0x40
RCC->AHB1ENR  |=0x1;      			        // Enabling AHB1 Clock
 800022c:	4b16      	ldr	r3, [pc, #88]	; (8000288 <USART_INIT+0x6c>)
 800022e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000230:	4a15      	ldr	r2, [pc, #84]	; (8000288 <USART_INIT+0x6c>)
 8000232:	f043 0301 	orr.w	r3, r3, #1
 8000236:	6313      	str	r3, [r2, #48]	; 0x30
GPIOA->AFR[0] |=0x0700;	                                // Setting PA2 as alternate function
 8000238:	4b14      	ldr	r3, [pc, #80]	; (800028c <USART_INIT+0x70>)
 800023a:	6a1b      	ldr	r3, [r3, #32]
 800023c:	4a13      	ldr	r2, [pc, #76]	; (800028c <USART_INIT+0x70>)
 800023e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000242:	6213      	str	r3, [r2, #32]
GPIOA->MODER  |=0x20;                                   // Setting PA2 as output
 8000244:	4b11      	ldr	r3, [pc, #68]	; (800028c <USART_INIT+0x70>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a10      	ldr	r2, [pc, #64]	; (800028c <USART_INIT+0x70>)
 800024a:	f043 0320 	orr.w	r3, r3, #32
 800024e:	6013      	str	r3, [r2, #0]
USART2->BRR   =0x0683; 		                        // Setting the baude rate (9600 @ 16MHz)
 8000250:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <USART_INIT+0x74>)
 8000252:	f240 6283 	movw	r2, #1667	; 0x683
 8000256:	609a      	str	r2, [r3, #8]
USART2->CR1   |=0x8;  		     	                // Enabling the transmitter
 8000258:	4b0d      	ldr	r3, [pc, #52]	; (8000290 <USART_INIT+0x74>)
 800025a:	68db      	ldr	r3, [r3, #12]
 800025c:	4a0c      	ldr	r2, [pc, #48]	; (8000290 <USART_INIT+0x74>)
 800025e:	f043 0308 	orr.w	r3, r3, #8
 8000262:	60d3      	str	r3, [r2, #12]
USART2->CR1   |=0x2000;			                // Enabling the USART2
 8000264:	4b0a      	ldr	r3, [pc, #40]	; (8000290 <USART_INIT+0x74>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	4a09      	ldr	r2, [pc, #36]	; (8000290 <USART_INIT+0x74>)
 800026a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800026e:	60d3      	str	r3, [r2, #12]

USART2->CR1	|=	(5<<5);			//	Enable TXE and RXNE interrupts
 8000270:	4b07      	ldr	r3, [pc, #28]	; (8000290 <USART_INIT+0x74>)
 8000272:	68db      	ldr	r3, [r3, #12]
 8000274:	4a06      	ldr	r2, [pc, #24]	; (8000290 <USART_INIT+0x74>)
 8000276:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800027a:	60d3      	str	r3, [r2, #12]
NVIC_EnableIRQ(USART2_IRQn);	//	Enable global interrupt vector
 800027c:	2026      	movs	r0, #38	; 0x26
 800027e:	f7ff ffa9 	bl	80001d4 <__NVIC_EnableIRQ>
}
 8000282:	bf00      	nop
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	40023800 	.word	0x40023800
 800028c:	40020000 	.word	0x40020000
 8000290:	40004400 	.word	0x40004400

08000294 <USART2_IRQHandler>:
	GPIOA->ODR &=~(1<<5);
	return temp;

}

void USART2_IRQHandler(void){
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0

	 if(USART2->SR & (1<<5)){
 8000298:	4b0a      	ldr	r3, [pc, #40]	; (80002c4 <USART2_IRQHandler+0x30>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	f003 0320 	and.w	r3, r3, #32
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d009      	beq.n	80002b8 <USART2_IRQHandler+0x24>
		//	Recieved data ready to read.
		data= USART2->DR;
 80002a4:	4b07      	ldr	r3, [pc, #28]	; (80002c4 <USART2_IRQHandler+0x30>)
 80002a6:	685b      	ldr	r3, [r3, #4]
 80002a8:	b2da      	uxtb	r2, r3
 80002aa:	4b07      	ldr	r3, [pc, #28]	; (80002c8 <USART2_IRQHandler+0x34>)
 80002ac:	701a      	strb	r2, [r3, #0]
		USART2->DR=data;
 80002ae:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <USART2_IRQHandler+0x34>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	b2da      	uxtb	r2, r3
 80002b4:	4b03      	ldr	r3, [pc, #12]	; (80002c4 <USART2_IRQHandler+0x30>)
 80002b6:	605a      	str	r2, [r3, #4]
	}
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	40004400 	.word	0x40004400
 80002c8:	20000020 	.word	0x20000020

080002cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002d0:	e7fe      	b.n	80002d0 <NMI_Handler+0x4>

080002d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002d2:	b480      	push	{r7}
 80002d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002d6:	e7fe      	b.n	80002d6 <HardFault_Handler+0x4>

080002d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002dc:	e7fe      	b.n	80002dc <MemManage_Handler+0x4>

080002de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002de:	b480      	push	{r7}
 80002e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002e2:	e7fe      	b.n	80002e2 <BusFault_Handler+0x4>

080002e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002e8:	e7fe      	b.n	80002e8 <UsageFault_Handler+0x4>

080002ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002ea:	b480      	push	{r7}
 80002ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002ee:	bf00      	nop
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr

080002f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr

08000306 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000306:	b480      	push	{r7}
 8000308:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr

08000314 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000318:	f000 f83e 	bl	8000398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}

08000320 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000324:	4b06      	ldr	r3, [pc, #24]	; (8000340 <SystemInit+0x20>)
 8000326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800032a:	4a05      	ldr	r2, [pc, #20]	; (8000340 <SystemInit+0x20>)
 800032c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000330:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	e000ed00 	.word	0xe000ed00

08000344 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000344:	f8df d034 	ldr.w	sp, [pc, #52]	; 800037c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000348:	480d      	ldr	r0, [pc, #52]	; (8000380 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800034a:	490e      	ldr	r1, [pc, #56]	; (8000384 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800034c:	4a0e      	ldr	r2, [pc, #56]	; (8000388 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800034e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000350:	e002      	b.n	8000358 <LoopCopyDataInit>

08000352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000356:	3304      	adds	r3, #4

08000358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800035a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800035c:	d3f9      	bcc.n	8000352 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800035e:	4a0b      	ldr	r2, [pc, #44]	; (800038c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000360:	4c0b      	ldr	r4, [pc, #44]	; (8000390 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000364:	e001      	b.n	800036a <LoopFillZerobss>

08000366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000368:	3204      	adds	r2, #4

0800036a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800036a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800036c:	d3fb      	bcc.n	8000366 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800036e:	f7ff ffd7 	bl	8000320 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000372:	f000 f825 	bl	80003c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000376:	f7ff ff4b 	bl	8000210 <main>
  bx  lr    
 800037a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800037c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000384:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000388:	08000428 	.word	0x08000428
  ldr r2, =_sbss
 800038c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000390:	20000028 	.word	0x20000028

08000394 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000394:	e7fe      	b.n	8000394 <ADC_IRQHandler>
	...

08000398 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <HAL_IncTick+0x20>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	461a      	mov	r2, r3
 80003a2:	4b06      	ldr	r3, [pc, #24]	; (80003bc <HAL_IncTick+0x24>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4413      	add	r3, r2
 80003a8:	4a04      	ldr	r2, [pc, #16]	; (80003bc <HAL_IncTick+0x24>)
 80003aa:	6013      	str	r3, [r2, #0]
}
 80003ac:	bf00      	nop
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	20000000 	.word	0x20000000
 80003bc:	20000024 	.word	0x20000024

080003c0 <__libc_init_array>:
 80003c0:	b570      	push	{r4, r5, r6, lr}
 80003c2:	4d0d      	ldr	r5, [pc, #52]	; (80003f8 <__libc_init_array+0x38>)
 80003c4:	4c0d      	ldr	r4, [pc, #52]	; (80003fc <__libc_init_array+0x3c>)
 80003c6:	1b64      	subs	r4, r4, r5
 80003c8:	10a4      	asrs	r4, r4, #2
 80003ca:	2600      	movs	r6, #0
 80003cc:	42a6      	cmp	r6, r4
 80003ce:	d109      	bne.n	80003e4 <__libc_init_array+0x24>
 80003d0:	4d0b      	ldr	r5, [pc, #44]	; (8000400 <__libc_init_array+0x40>)
 80003d2:	4c0c      	ldr	r4, [pc, #48]	; (8000404 <__libc_init_array+0x44>)
 80003d4:	f000 f818 	bl	8000408 <_init>
 80003d8:	1b64      	subs	r4, r4, r5
 80003da:	10a4      	asrs	r4, r4, #2
 80003dc:	2600      	movs	r6, #0
 80003de:	42a6      	cmp	r6, r4
 80003e0:	d105      	bne.n	80003ee <__libc_init_array+0x2e>
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e8:	4798      	blx	r3
 80003ea:	3601      	adds	r6, #1
 80003ec:	e7ee      	b.n	80003cc <__libc_init_array+0xc>
 80003ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f2:	4798      	blx	r3
 80003f4:	3601      	adds	r6, #1
 80003f6:	e7f2      	b.n	80003de <__libc_init_array+0x1e>
 80003f8:	08000420 	.word	0x08000420
 80003fc:	08000420 	.word	0x08000420
 8000400:	08000420 	.word	0x08000420
 8000404:	08000424 	.word	0x08000424

08000408 <_init>:
 8000408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040a:	bf00      	nop
 800040c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040e:	bc08      	pop	{r3}
 8000410:	469e      	mov	lr, r3
 8000412:	4770      	bx	lr

08000414 <_fini>:
 8000414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000416:	bf00      	nop
 8000418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041a:	bc08      	pop	{r3}
 800041c:	469e      	mov	lr, r3
 800041e:	4770      	bx	lr
