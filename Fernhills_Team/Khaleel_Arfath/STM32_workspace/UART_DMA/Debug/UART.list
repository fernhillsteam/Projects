
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000274  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000408  08000408  00010408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000418  08000418  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000418  08000418  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000418  08000418  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000418  08000418  00010418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800041c  0800041c  0001041c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000420  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000424  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000424  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001ef1  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000670  00000000  00000000  00021f25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d0  00000000  00000000  00022598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000188  00000000  00000000  00022768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000142c6  00000000  00000000  000228f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002082  00000000  00000000  00036bb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080bec  00000000  00000000  00038c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b9824  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000570  00000000  00000000  000b9878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003f0 	.word	0x080003f0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080003f0 	.word	0x080003f0

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <main>:
void USART_INIT(void);

void USART2_WRITE( char* ch);

int main(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
USART_INIT();
 80001e8:	f000 f808 	bl	80001fc <USART_INIT>
	while(1)
	{
		 USART_INIT();
 80001ec:	f000 f806 	bl	80001fc <USART_INIT>
		 USART2_WRITE("USART2 WORKS");
 80001f0:	4801      	ldr	r0, [pc, #4]	; (80001f8 <main+0x14>)
 80001f2:	f000 f839 	bl	8000268 <USART2_WRITE>
		 USART_INIT();
 80001f6:	e7f9      	b.n	80001ec <main+0x8>
 80001f8:	08000408 	.word	0x08000408

080001fc <USART_INIT>:
}

}

void USART_INIT(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
RCC->APB1ENR  |=0x20000;   				// Enabling APB1 Clock
 8000200:	4b16      	ldr	r3, [pc, #88]	; (800025c <USART_INIT+0x60>)
 8000202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000204:	4a15      	ldr	r2, [pc, #84]	; (800025c <USART_INIT+0x60>)
 8000206:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800020a:	6413      	str	r3, [r2, #64]	; 0x40
RCC->AHB1ENR  |=0x1;      			        // Enabling AHB1 Clock
 800020c:	4b13      	ldr	r3, [pc, #76]	; (800025c <USART_INIT+0x60>)
 800020e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000210:	4a12      	ldr	r2, [pc, #72]	; (800025c <USART_INIT+0x60>)
 8000212:	f043 0301 	orr.w	r3, r3, #1
 8000216:	6313      	str	r3, [r2, #48]	; 0x30
GPIOA->AFR[0] |=0x0700;	                                // Setting PA2 as alternate function
 8000218:	4b11      	ldr	r3, [pc, #68]	; (8000260 <USART_INIT+0x64>)
 800021a:	6a1b      	ldr	r3, [r3, #32]
 800021c:	4a10      	ldr	r2, [pc, #64]	; (8000260 <USART_INIT+0x64>)
 800021e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000222:	6213      	str	r3, [r2, #32]
GPIOA->MODER  |=0x20;                                   // Setting PA2 as output
 8000224:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <USART_INIT+0x64>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a0d      	ldr	r2, [pc, #52]	; (8000260 <USART_INIT+0x64>)
 800022a:	f043 0320 	orr.w	r3, r3, #32
 800022e:	6013      	str	r3, [r2, #0]
USART2->BRR   =0x0683; 		                        // Setting the baude rate (9600 @ 16MHz)
 8000230:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <USART_INIT+0x68>)
 8000232:	f240 6283 	movw	r2, #1667	; 0x683
 8000236:	609a      	str	r2, [r3, #8]
USART2->CR1   |=0x8;  		     	                // Enabling the transmitter
 8000238:	4b0a      	ldr	r3, [pc, #40]	; (8000264 <USART_INIT+0x68>)
 800023a:	68db      	ldr	r3, [r3, #12]
 800023c:	4a09      	ldr	r2, [pc, #36]	; (8000264 <USART_INIT+0x68>)
 800023e:	f043 0308 	orr.w	r3, r3, #8
 8000242:	60d3      	str	r3, [r2, #12]
USART2->CR1   |=0x2000;			                // Enabling the USART2
 8000244:	4b07      	ldr	r3, [pc, #28]	; (8000264 <USART_INIT+0x68>)
 8000246:	68db      	ldr	r3, [r3, #12]
 8000248:	4a06      	ldr	r2, [pc, #24]	; (8000264 <USART_INIT+0x68>)
 800024a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800024e:	60d3      	str	r3, [r2, #12]
}
 8000250:	bf00      	nop
 8000252:	46bd      	mov	sp, r7
 8000254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	40023800 	.word	0x40023800
 8000260:	40020000 	.word	0x40020000
 8000264:	40004400 	.word	0x40004400

08000268 <USART2_WRITE>:

void USART2_WRITE( char* ch)
{
 8000268:	b590      	push	{r4, r7, lr}
 800026a:	b085      	sub	sp, #20
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0; i < strlen(ch);i++)
 8000270:	2300      	movs	r3, #0
 8000272:	73fb      	strb	r3, [r7, #15]
 8000274:	e00f      	b.n	8000296 <USART2_WRITE+0x2e>
	{
	while(!(USART2->SR & 0x0080)){}
 8000276:	bf00      	nop
 8000278:	4b0d      	ldr	r3, [pc, #52]	; (80002b0 <USART2_WRITE+0x48>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000280:	2b00      	cmp	r3, #0
 8000282:	d0f9      	beq.n	8000278 <USART2_WRITE+0x10>
	USART2->DR = ch[i] & 0xFF;			//Sending the data
 8000284:	7bfb      	ldrb	r3, [r7, #15]
 8000286:	687a      	ldr	r2, [r7, #4]
 8000288:	4413      	add	r3, r2
 800028a:	781a      	ldrb	r2, [r3, #0]
 800028c:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <USART2_WRITE+0x48>)
 800028e:	605a      	str	r2, [r3, #4]
	for (uint8_t i=0; i < strlen(ch);i++)
 8000290:	7bfb      	ldrb	r3, [r7, #15]
 8000292:	3301      	adds	r3, #1
 8000294:	73fb      	strb	r3, [r7, #15]
 8000296:	7bfc      	ldrb	r4, [r7, #15]
 8000298:	6878      	ldr	r0, [r7, #4]
 800029a:	f7ff ff9b 	bl	80001d4 <strlen>
 800029e:	4603      	mov	r3, r0
 80002a0:	429c      	cmp	r4, r3
 80002a2:	d3e8      	bcc.n	8000276 <USART2_WRITE+0xe>
	}
}
 80002a4:	bf00      	nop
 80002a6:	bf00      	nop
 80002a8:	3714      	adds	r7, #20
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd90      	pop	{r4, r7, pc}
 80002ae:	bf00      	nop
 80002b0:	40004400 	.word	0x40004400

080002b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002b8:	e7fe      	b.n	80002b8 <NMI_Handler+0x4>

080002ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002ba:	b480      	push	{r7}
 80002bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002be:	e7fe      	b.n	80002be <HardFault_Handler+0x4>

080002c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002c4:	e7fe      	b.n	80002c4 <MemManage_Handler+0x4>

080002c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002c6:	b480      	push	{r7}
 80002c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002ca:	e7fe      	b.n	80002ca <BusFault_Handler+0x4>

080002cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002d0:	e7fe      	b.n	80002d0 <UsageFault_Handler+0x4>

080002d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002d2:	b480      	push	{r7}
 80002d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002d6:	bf00      	nop
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr

080002e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002e4:	bf00      	nop
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr

080002ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002ee:	b480      	push	{r7}
 80002f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002f2:	bf00      	nop
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr

080002fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000300:	f000 f83e 	bl	8000380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000304:	bf00      	nop
 8000306:	bd80      	pop	{r7, pc}

08000308 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800030c:	4b06      	ldr	r3, [pc, #24]	; (8000328 <SystemInit+0x20>)
 800030e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000312:	4a05      	ldr	r2, [pc, #20]	; (8000328 <SystemInit+0x20>)
 8000314:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000318:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800031c:	bf00      	nop
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800032c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000364 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000330:	480d      	ldr	r0, [pc, #52]	; (8000368 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000332:	490e      	ldr	r1, [pc, #56]	; (800036c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000334:	4a0e      	ldr	r2, [pc, #56]	; (8000370 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000338:	e002      	b.n	8000340 <LoopCopyDataInit>

0800033a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800033a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800033c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800033e:	3304      	adds	r3, #4

08000340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000344:	d3f9      	bcc.n	800033a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000346:	4a0b      	ldr	r2, [pc, #44]	; (8000374 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000348:	4c0b      	ldr	r4, [pc, #44]	; (8000378 <LoopFillZerobss+0x26>)
  movs r3, #0
 800034a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800034c:	e001      	b.n	8000352 <LoopFillZerobss>

0800034e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800034e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000350:	3204      	adds	r2, #4

08000352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000354:	d3fb      	bcc.n	800034e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000356:	f7ff ffd7 	bl	8000308 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800035a:	f000 f825 	bl	80003a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800035e:	f7ff ff41 	bl	80001e4 <main>
  bx  lr    
 8000362:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000364:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800036c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000370:	08000420 	.word	0x08000420
  ldr r2, =_sbss
 8000374:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000378:	20000024 	.word	0x20000024

0800037c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800037c:	e7fe      	b.n	800037c <ADC_IRQHandler>
	...

08000380 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000384:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <HAL_IncTick+0x20>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	461a      	mov	r2, r3
 800038a:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <HAL_IncTick+0x24>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4413      	add	r3, r2
 8000390:	4a04      	ldr	r2, [pc, #16]	; (80003a4 <HAL_IncTick+0x24>)
 8000392:	6013      	str	r3, [r2, #0]
}
 8000394:	bf00      	nop
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	20000000 	.word	0x20000000
 80003a4:	20000020 	.word	0x20000020

080003a8 <__libc_init_array>:
 80003a8:	b570      	push	{r4, r5, r6, lr}
 80003aa:	4d0d      	ldr	r5, [pc, #52]	; (80003e0 <__libc_init_array+0x38>)
 80003ac:	4c0d      	ldr	r4, [pc, #52]	; (80003e4 <__libc_init_array+0x3c>)
 80003ae:	1b64      	subs	r4, r4, r5
 80003b0:	10a4      	asrs	r4, r4, #2
 80003b2:	2600      	movs	r6, #0
 80003b4:	42a6      	cmp	r6, r4
 80003b6:	d109      	bne.n	80003cc <__libc_init_array+0x24>
 80003b8:	4d0b      	ldr	r5, [pc, #44]	; (80003e8 <__libc_init_array+0x40>)
 80003ba:	4c0c      	ldr	r4, [pc, #48]	; (80003ec <__libc_init_array+0x44>)
 80003bc:	f000 f818 	bl	80003f0 <_init>
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	10a4      	asrs	r4, r4, #2
 80003c4:	2600      	movs	r6, #0
 80003c6:	42a6      	cmp	r6, r4
 80003c8:	d105      	bne.n	80003d6 <__libc_init_array+0x2e>
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d0:	4798      	blx	r3
 80003d2:	3601      	adds	r6, #1
 80003d4:	e7ee      	b.n	80003b4 <__libc_init_array+0xc>
 80003d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003da:	4798      	blx	r3
 80003dc:	3601      	adds	r6, #1
 80003de:	e7f2      	b.n	80003c6 <__libc_init_array+0x1e>
 80003e0:	08000418 	.word	0x08000418
 80003e4:	08000418 	.word	0x08000418
 80003e8:	08000418 	.word	0x08000418
 80003ec:	0800041c 	.word	0x0800041c

080003f0 <_init>:
 80003f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f2:	bf00      	nop
 80003f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f6:	bc08      	pop	{r3}
 80003f8:	469e      	mov	lr, r3
 80003fa:	4770      	bx	lr

080003fc <_fini>:
 80003fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fe:	bf00      	nop
 8000400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000402:	bc08      	pop	{r3}
 8000404:	469e      	mov	lr, r3
 8000406:	4770      	bx	lr
