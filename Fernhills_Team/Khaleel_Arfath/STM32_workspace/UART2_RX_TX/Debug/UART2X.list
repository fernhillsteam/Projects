
UART2X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002c4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000458  08000458  00010458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000468  08000468  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000468  08000468  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000468  08000468  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000468  08000468  00010468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800046c  0800046c  0001046c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000470  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000474  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000474  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001f3d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000681  00000000  00000000  00021f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e0  00000000  00000000  000225f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000198  00000000  00000000  000227d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000146c6  00000000  00000000  00022970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000212a  00000000  00000000  00037036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081af5  00000000  00000000  00039160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bac55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005bc  00000000  00000000  000baca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000440 	.word	0x08000440

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000440 	.word	0x08000440

080001d4 <USART2_Init>:

#include "stm32f4xx.h"                  // Device header
#include <stdio.h>

void USART2_Init(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= 0x20000; 							// 0000 0000 0000 0010 0000 0000 0000 0000   enable USART2 port
 80001d8:	4b18      	ldr	r3, [pc, #96]	; (800023c <USART2_Init+0x68>)
 80001da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80001dc:	4a17      	ldr	r2, [pc, #92]	; (800023c <USART2_Init+0x68>)
 80001de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001e2:	6413      	str	r3, [r2, #64]	; 0x40
    RCC->AHB1ENR |= 1;      							// 0000 0000 0000 0000 0000 0000 0000 0001   enable port A
 80001e4:	4b15      	ldr	r3, [pc, #84]	; (800023c <USART2_Init+0x68>)
 80001e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e8:	4a14      	ldr	r2, [pc, #80]	; (800023c <USART2_Init+0x68>)
 80001ea:	f043 0301 	orr.w	r3, r3, #1
 80001ee:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->AFR[0] |= 0x7700;
 80001f0:	4b13      	ldr	r3, [pc, #76]	; (8000240 <USART2_Init+0x6c>)
 80001f2:	6a1b      	ldr	r3, [r3, #32]
 80001f4:	4a12      	ldr	r2, [pc, #72]	; (8000240 <USART2_Init+0x6c>)
 80001f6:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80001fa:	6213      	str	r3, [r2, #32]
	GPIOA->MODER	|= 0x00A0;              // 0000 0000 0000 0000 0000 0000 1010 0000   enable alternate function for PA2 and PA3
 80001fc:	4b10      	ldr	r3, [pc, #64]	; (8000240 <USART2_Init+0x6c>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a0f      	ldr	r2, [pc, #60]	; (8000240 <USART2_Init+0x6c>)
 8000202:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000206:	6013      	str	r3, [r2, #0]

	USART2->BRR |= 0x0683;								// 9600 baud rate
 8000208:	4b0e      	ldr	r3, [pc, #56]	; (8000244 <USART2_Init+0x70>)
 800020a:	689b      	ldr	r3, [r3, #8]
 800020c:	4a0d      	ldr	r2, [pc, #52]	; (8000244 <USART2_Init+0x70>)
 800020e:	f443 63d0 	orr.w	r3, r3, #1664	; 0x680
 8000212:	f043 0303 	orr.w	r3, r3, #3
 8000216:	6093      	str	r3, [r2, #8]
	USART2->CR1 |= 0x000C;								// 0000 0000 0000 0000 0000 0000 0000 1100   enable rx and tx
 8000218:	4b0a      	ldr	r3, [pc, #40]	; (8000244 <USART2_Init+0x70>)
 800021a:	68db      	ldr	r3, [r3, #12]
 800021c:	4a09      	ldr	r2, [pc, #36]	; (8000244 <USART2_Init+0x70>)
 800021e:	f043 030c 	orr.w	r3, r3, #12
 8000222:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= 0x2000;  							// 0000 0000 0000 0010 0000 0000 0000 0000   enable USART
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <USART2_Init+0x70>)
 8000226:	68db      	ldr	r3, [r3, #12]
 8000228:	4a06      	ldr	r2, [pc, #24]	; (8000244 <USART2_Init+0x70>)
 800022a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800022e:	60d3      	str	r3, [r2, #12]
	}
 8000230:	bf00      	nop
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	40023800 	.word	0x40023800
 8000240:	40020000 	.word	0x40020000
 8000244:	40004400 	.word	0x40004400

08000248 <USART2_WriteChar>:

void USART2_WriteChar(uint8_t character)
{
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	4603      	mov	r3, r0
 8000250:	71fb      	strb	r3, [r7, #7]
	while(!(USART2->SR & 0x80));			// USART_SR_TXE
 8000252:	bf00      	nop
 8000254:	4b07      	ldr	r3, [pc, #28]	; (8000274 <USART2_WriteChar+0x2c>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800025c:	2b00      	cmp	r3, #0
 800025e:	d0f9      	beq.n	8000254 <USART2_WriteChar+0xc>
  	USART2->DR = character;
 8000260:	4a04      	ldr	r2, [pc, #16]	; (8000274 <USART2_WriteChar+0x2c>)
 8000262:	79fb      	ldrb	r3, [r7, #7]
 8000264:	6053      	str	r3, [r2, #4]
}
 8000266:	bf00      	nop
 8000268:	370c      	adds	r7, #12
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	40004400 	.word	0x40004400

08000278 <USART2_WriteString>:

void USART2_WriteString(uint8_t *string)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
	while(*string)
 8000280:	e007      	b.n	8000292 <USART2_WriteString+0x1a>
	{
		USART2_WriteChar(*string);
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	4618      	mov	r0, r3
 8000288:	f7ff ffde 	bl	8000248 <USART2_WriteChar>
		*string++;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	3301      	adds	r3, #1
 8000290:	607b      	str	r3, [r7, #4]
	while(*string)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d1f3      	bne.n	8000282 <USART2_WriteString+0xa>
	}
}
 800029a:	bf00      	nop
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
	uint8_t Receive_Characher;

	/* RXNE handler */
	if (USART2->SR & 0x20)					// USART_SR_RXNE
 80002aa:	4b08      	ldr	r3, [pc, #32]	; (80002cc <USART2_IRQHandler+0x28>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f003 0320 	and.w	r3, r3, #32
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d006      	beq.n	80002c4 <USART2_IRQHandler+0x20>
	{
		Receive_Characher = (USART2->DR & 0xFF);
 80002b6:	4b05      	ldr	r3, [pc, #20]	; (80002cc <USART2_IRQHandler+0x28>)
 80002b8:	685b      	ldr	r3, [r3, #4]
 80002ba:	71fb      	strb	r3, [r7, #7]
		USART2_WriteChar(Receive_Characher);
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	4618      	mov	r0, r3
 80002c0:	f7ff ffc2 	bl	8000248 <USART2_WriteChar>
	}
}
 80002c4:	bf00      	nop
 80002c6:	3708      	adds	r7, #8
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	40004400 	.word	0x40004400

080002d0 <main>:

void main()
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
	uint8_t Receive_Characher;

	 USART2_Init();
 80002d6:	f7ff ff7d 	bl	80001d4 <USART2_Init>
	 USART2_WriteString("UART DEMO TX RX");
 80002da:	4808      	ldr	r0, [pc, #32]	; (80002fc <main+0x2c>)
 80002dc:	f7ff ffcc 	bl	8000278 <USART2_WriteString>

	 while(1)
	 {
		 if (USART2->SR & 0x20)					// USART_SR_RXNE
 80002e0:	4b07      	ldr	r3, [pc, #28]	; (8000300 <main+0x30>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	f003 0320 	and.w	r3, r3, #32
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d0f9      	beq.n	80002e0 <main+0x10>
		 	{
		 		Receive_Characher = (USART2->DR & 0xFF);
 80002ec:	4b04      	ldr	r3, [pc, #16]	; (8000300 <main+0x30>)
 80002ee:	685b      	ldr	r3, [r3, #4]
 80002f0:	71fb      	strb	r3, [r7, #7]
		 		USART2_WriteChar(Receive_Characher);
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	4618      	mov	r0, r3
 80002f6:	f7ff ffa7 	bl	8000248 <USART2_WriteChar>
		 if (USART2->SR & 0x20)					// USART_SR_RXNE
 80002fa:	e7f1      	b.n	80002e0 <main+0x10>
 80002fc:	08000458 	.word	0x08000458
 8000300:	40004400 	.word	0x40004400

08000304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000308:	e7fe      	b.n	8000308 <NMI_Handler+0x4>

0800030a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800030a:	b480      	push	{r7}
 800030c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800030e:	e7fe      	b.n	800030e <HardFault_Handler+0x4>

08000310 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000314:	e7fe      	b.n	8000314 <MemManage_Handler+0x4>

08000316 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000316:	b480      	push	{r7}
 8000318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800031a:	e7fe      	b.n	800031a <BusFault_Handler+0x4>

0800031c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000320:	e7fe      	b.n	8000320 <UsageFault_Handler+0x4>

08000322 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000322:	b480      	push	{r7}
 8000324:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000326:	bf00      	nop
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr

08000330 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr

0800033e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800033e:	b480      	push	{r7}
 8000340:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000342:	bf00      	nop
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr

0800034c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000350:	f000 f83e 	bl	80003d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000354:	bf00      	nop
 8000356:	bd80      	pop	{r7, pc}

08000358 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800035c:	4b06      	ldr	r3, [pc, #24]	; (8000378 <SystemInit+0x20>)
 800035e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000362:	4a05      	ldr	r2, [pc, #20]	; (8000378 <SystemInit+0x20>)
 8000364:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000368:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800036c:	bf00      	nop
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	e000ed00 	.word	0xe000ed00

0800037c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800037c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000380:	480d      	ldr	r0, [pc, #52]	; (80003b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000382:	490e      	ldr	r1, [pc, #56]	; (80003bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000384:	4a0e      	ldr	r2, [pc, #56]	; (80003c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000388:	e002      	b.n	8000390 <LoopCopyDataInit>

0800038a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800038a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800038c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800038e:	3304      	adds	r3, #4

08000390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000394:	d3f9      	bcc.n	800038a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000396:	4a0b      	ldr	r2, [pc, #44]	; (80003c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000398:	4c0b      	ldr	r4, [pc, #44]	; (80003c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800039a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800039c:	e001      	b.n	80003a2 <LoopFillZerobss>

0800039e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800039e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a0:	3204      	adds	r2, #4

080003a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a4:	d3fb      	bcc.n	800039e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003a6:	f7ff ffd7 	bl	8000358 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003aa:	f000 f825 	bl	80003f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003ae:	f7ff ff8f 	bl	80002d0 <main>
  bx  lr    
 80003b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80003b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003bc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003c0:	08000470 	.word	0x08000470
  ldr r2, =_sbss
 80003c4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003c8:	20000024 	.word	0x20000024

080003cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003cc:	e7fe      	b.n	80003cc <ADC_IRQHandler>
	...

080003d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003d4:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <HAL_IncTick+0x20>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	461a      	mov	r2, r3
 80003da:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <HAL_IncTick+0x24>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4413      	add	r3, r2
 80003e0:	4a04      	ldr	r2, [pc, #16]	; (80003f4 <HAL_IncTick+0x24>)
 80003e2:	6013      	str	r3, [r2, #0]
}
 80003e4:	bf00      	nop
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	20000000 	.word	0x20000000
 80003f4:	20000020 	.word	0x20000020

080003f8 <__libc_init_array>:
 80003f8:	b570      	push	{r4, r5, r6, lr}
 80003fa:	4d0d      	ldr	r5, [pc, #52]	; (8000430 <__libc_init_array+0x38>)
 80003fc:	4c0d      	ldr	r4, [pc, #52]	; (8000434 <__libc_init_array+0x3c>)
 80003fe:	1b64      	subs	r4, r4, r5
 8000400:	10a4      	asrs	r4, r4, #2
 8000402:	2600      	movs	r6, #0
 8000404:	42a6      	cmp	r6, r4
 8000406:	d109      	bne.n	800041c <__libc_init_array+0x24>
 8000408:	4d0b      	ldr	r5, [pc, #44]	; (8000438 <__libc_init_array+0x40>)
 800040a:	4c0c      	ldr	r4, [pc, #48]	; (800043c <__libc_init_array+0x44>)
 800040c:	f000 f818 	bl	8000440 <_init>
 8000410:	1b64      	subs	r4, r4, r5
 8000412:	10a4      	asrs	r4, r4, #2
 8000414:	2600      	movs	r6, #0
 8000416:	42a6      	cmp	r6, r4
 8000418:	d105      	bne.n	8000426 <__libc_init_array+0x2e>
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000420:	4798      	blx	r3
 8000422:	3601      	adds	r6, #1
 8000424:	e7ee      	b.n	8000404 <__libc_init_array+0xc>
 8000426:	f855 3b04 	ldr.w	r3, [r5], #4
 800042a:	4798      	blx	r3
 800042c:	3601      	adds	r6, #1
 800042e:	e7f2      	b.n	8000416 <__libc_init_array+0x1e>
 8000430:	08000468 	.word	0x08000468
 8000434:	08000468 	.word	0x08000468
 8000438:	08000468 	.word	0x08000468
 800043c:	0800046c 	.word	0x0800046c

08000440 <_init>:
 8000440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000442:	bf00      	nop
 8000444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000446:	bc08      	pop	{r3}
 8000448:	469e      	mov	lr, r3
 800044a:	4770      	bx	lr

0800044c <_fini>:
 800044c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044e:	bf00      	nop
 8000450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000452:	bc08      	pop	{r3}
 8000454:	469e      	mov	lr, r3
 8000456:	4770      	bx	lr
