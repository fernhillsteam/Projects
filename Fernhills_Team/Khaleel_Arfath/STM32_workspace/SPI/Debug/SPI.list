
SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002e8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800047c  0800047c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800047c  0800047c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800047c  0800047c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800047c  0800047c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800047c  0800047c  0001047c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000480  08000480  00010480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000484  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000488  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000488  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000169f  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005ac  00000000  00000000  000216d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d8  00000000  00000000  00021c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000190  00000000  00000000  00021e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013a65  00000000  00000000  00021fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001f70  00000000  00000000  00035a4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007d481  00000000  00000000  000379bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b4e3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000059c  00000000  00000000  000b4e94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000464 	.word	0x08000464

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000464 	.word	0x08000464

080001d4 <main>:

void delayMs(int n);
void SPI1_init(void);
void SPI1_write(unsigned char data);

int main(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
    char c;

    SPI1_init();
 80001da:	f000 f811 	bl	8000200 <SPI1_init>

    while(1) {
        for (c = 'A'; c <= 'Z'; c++) {
 80001de:	2341      	movs	r3, #65	; 0x41
 80001e0:	71fb      	strb	r3, [r7, #7]
 80001e2:	e009      	b.n	80001f8 <main+0x24>
            SPI1_write(c);      /* write the letter through SPI1 */
 80001e4:	79fb      	ldrb	r3, [r7, #7]
 80001e6:	4618      	mov	r0, r3
 80001e8:	f000 f858 	bl	800029c <SPI1_write>
            delayMs(100);
 80001ec:	2064      	movs	r0, #100	; 0x64
 80001ee:	f000 f87d 	bl	80002ec <delayMs>
        for (c = 'A'; c <= 'Z'; c++) {
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	3301      	adds	r3, #1
 80001f6:	71fb      	strb	r3, [r7, #7]
 80001f8:	79fb      	ldrb	r3, [r7, #7]
 80001fa:	2b5a      	cmp	r3, #90	; 0x5a
 80001fc:	d9f2      	bls.n	80001e4 <main+0x10>
 80001fe:	e7ee      	b.n	80001de <main+0xa>

08000200 <SPI1_init>:
        }
    }
}

/* enable SPI1 and associated GPIO pins */
void SPI1_init(void) {
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= 1;              /* enable GPIOA clock */
 8000204:	4b22      	ldr	r3, [pc, #136]	; (8000290 <SPI1_init+0x90>)
 8000206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000208:	4a21      	ldr	r2, [pc, #132]	; (8000290 <SPI1_init+0x90>)
 800020a:	f043 0301 	orr.w	r3, r3, #1
 800020e:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB2ENR |= 0x1000;         /* enable SPI1 clock */
 8000210:	4b1f      	ldr	r3, [pc, #124]	; (8000290 <SPI1_init+0x90>)
 8000212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000214:	4a1e      	ldr	r2, [pc, #120]	; (8000290 <SPI1_init+0x90>)
 8000216:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800021a:	6453      	str	r3, [r2, #68]	; 0x44

    /* PORTA 5, 7 for SPI1 MOSI and SCLK */
    GPIOA->MODER &= ~0x0000CC00;    /* clear pin mode */
 800021c:	4b1d      	ldr	r3, [pc, #116]	; (8000294 <SPI1_init+0x94>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a1c      	ldr	r2, [pc, #112]	; (8000294 <SPI1_init+0x94>)
 8000222:	f423 434c 	bic.w	r3, r3, #52224	; 0xcc00
 8000226:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  0x00008800;    /* set pin alternate mode */
 8000228:	4b1a      	ldr	r3, [pc, #104]	; (8000294 <SPI1_init+0x94>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a19      	ldr	r2, [pc, #100]	; (8000294 <SPI1_init+0x94>)
 800022e:	f443 4308 	orr.w	r3, r3, #34816	; 0x8800
 8000232:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~0xF0F00000;   /* clear alt mode */
 8000234:	4b17      	ldr	r3, [pc, #92]	; (8000294 <SPI1_init+0x94>)
 8000236:	6a1b      	ldr	r3, [r3, #32]
 8000238:	4a16      	ldr	r2, [pc, #88]	; (8000294 <SPI1_init+0x94>)
 800023a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800023e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000242:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  0x50500000;   /* set alt mode SPI1 */
 8000244:	4b13      	ldr	r3, [pc, #76]	; (8000294 <SPI1_init+0x94>)
 8000246:	6a1b      	ldr	r3, [r3, #32]
 8000248:	4a12      	ldr	r2, [pc, #72]	; (8000294 <SPI1_init+0x94>)
 800024a:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 800024e:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8000252:	6213      	str	r3, [r2, #32]

    /* PORTA4 as GPIO output for SPI slave select */
    GPIOA->MODER &= ~0x00000300;    /* clear pin mode */
 8000254:	4b0f      	ldr	r3, [pc, #60]	; (8000294 <SPI1_init+0x94>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a0e      	ldr	r2, [pc, #56]	; (8000294 <SPI1_init+0x94>)
 800025a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800025e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  0x00000100;    /* set pin output mode */
 8000260:	4b0c      	ldr	r3, [pc, #48]	; (8000294 <SPI1_init+0x94>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a0b      	ldr	r2, [pc, #44]	; (8000294 <SPI1_init+0x94>)
 8000266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800026a:	6013      	str	r3, [r2, #0]

    SPI1->CR1 = 0x31C;		   /* set the Baud rate, 8-bit data frame */
 800026c:	4b0a      	ldr	r3, [pc, #40]	; (8000298 <SPI1_init+0x98>)
 800026e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8000272:	601a      	str	r2, [r3, #0]
    SPI1->CR2 = 0;
 8000274:	4b08      	ldr	r3, [pc, #32]	; (8000298 <SPI1_init+0x98>)
 8000276:	2200      	movs	r2, #0
 8000278:	605a      	str	r2, [r3, #4]
    SPI1->CR1 |= 0x40;              /* enable SPI1 module */
 800027a:	4b07      	ldr	r3, [pc, #28]	; (8000298 <SPI1_init+0x98>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4a06      	ldr	r2, [pc, #24]	; (8000298 <SPI1_init+0x98>)
 8000280:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000284:	6013      	str	r3, [r2, #0]
}
 8000286:	bf00      	nop
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr
 8000290:	40023800 	.word	0x40023800
 8000294:	40020000 	.word	0x40020000
 8000298:	40013000 	.word	0x40013000

0800029c <SPI1_write>:

/* This function enables slave select, writes one byte to SPI1,
   wait for transmission complete and deassert slave select. */
void SPI1_write(unsigned char data) {
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	71fb      	strb	r3, [r7, #7]
    while (!(SPI1->SR & 2)) {}      /* wait until Transfer buffer Empty */
 80002a6:	bf00      	nop
 80002a8:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <SPI1_write+0x48>)
 80002aa:	689b      	ldr	r3, [r3, #8]
 80002ac:	f003 0302 	and.w	r3, r3, #2
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d0f9      	beq.n	80002a8 <SPI1_write+0xc>
    GPIOA->BSRR = 0x00100000;       /* assert slave select */
 80002b4:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <SPI1_write+0x4c>)
 80002b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80002ba:	619a      	str	r2, [r3, #24]
    SPI1->DR = data;                /* write data */
 80002bc:	4a09      	ldr	r2, [pc, #36]	; (80002e4 <SPI1_write+0x48>)
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	60d3      	str	r3, [r2, #12]
    while (SPI1->SR & 0x80) {}      /* wait for transmission done */
 80002c2:	bf00      	nop
 80002c4:	4b07      	ldr	r3, [pc, #28]	; (80002e4 <SPI1_write+0x48>)
 80002c6:	689b      	ldr	r3, [r3, #8]
 80002c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d1f9      	bne.n	80002c4 <SPI1_write+0x28>
    GPIOA->BSRR = 0x00000010;       /* deassert slave select */
 80002d0:	4b05      	ldr	r3, [pc, #20]	; (80002e8 <SPI1_write+0x4c>)
 80002d2:	2210      	movs	r2, #16
 80002d4:	619a      	str	r2, [r3, #24]
}
 80002d6:	bf00      	nop
 80002d8:	370c      	adds	r7, #12
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	40013000 	.word	0x40013000
 80002e8:	40020000 	.word	0x40020000

080002ec <delayMs>:

/* 16 MHz SYSCLK */
void delayMs(int n) {
 80002ec:	b480      	push	{r7}
 80002ee:	b085      	sub	sp, #20
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
    int i;
    for (; n > 0; n--)
 80002f4:	e00d      	b.n	8000312 <delayMs+0x26>
        for (i = 0; i < 3195; i++) ;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60fb      	str	r3, [r7, #12]
 80002fa:	e002      	b.n	8000302 <delayMs+0x16>
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	3301      	adds	r3, #1
 8000300:	60fb      	str	r3, [r7, #12]
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	f640 427a 	movw	r2, #3194	; 0xc7a
 8000308:	4293      	cmp	r3, r2
 800030a:	ddf7      	ble.n	80002fc <delayMs+0x10>
    for (; n > 0; n--)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	3b01      	subs	r3, #1
 8000310:	607b      	str	r3, [r7, #4]
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2b00      	cmp	r3, #0
 8000316:	dcee      	bgt.n	80002f6 <delayMs+0xa>
}
 8000318:	bf00      	nop
 800031a:	bf00      	nop
 800031c:	3714      	adds	r7, #20
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr

08000326 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000326:	b480      	push	{r7}
 8000328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800032a:	e7fe      	b.n	800032a <NMI_Handler+0x4>

0800032c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000330:	e7fe      	b.n	8000330 <HardFault_Handler+0x4>

08000332 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000332:	b480      	push	{r7}
 8000334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000336:	e7fe      	b.n	8000336 <MemManage_Handler+0x4>

08000338 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800033c:	e7fe      	b.n	800033c <BusFault_Handler+0x4>

0800033e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800033e:	b480      	push	{r7}
 8000340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000342:	e7fe      	b.n	8000342 <UsageFault_Handler+0x4>

08000344 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr

08000352 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000352:	b480      	push	{r7}
 8000354:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000356:	bf00      	nop
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr

08000360 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000364:	bf00      	nop
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr

0800036e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800036e:	b580      	push	{r7, lr}
 8000370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000372:	f000 f83f 	bl	80003f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
	...

0800037c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <SystemInit+0x20>)
 8000382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000386:	4a05      	ldr	r2, [pc, #20]	; (800039c <SystemInit+0x20>)
 8000388:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800038c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000390:	bf00      	nop
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	e000ed00 	.word	0xe000ed00

080003a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80003a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003a4:	480d      	ldr	r0, [pc, #52]	; (80003dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80003a6:	490e      	ldr	r1, [pc, #56]	; (80003e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80003a8:	4a0e      	ldr	r2, [pc, #56]	; (80003e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003ac:	e002      	b.n	80003b4 <LoopCopyDataInit>

080003ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003b2:	3304      	adds	r3, #4

080003b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b8:	d3f9      	bcc.n	80003ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ba:	4a0b      	ldr	r2, [pc, #44]	; (80003e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80003bc:	4c0b      	ldr	r4, [pc, #44]	; (80003ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80003be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c0:	e001      	b.n	80003c6 <LoopFillZerobss>

080003c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003c4:	3204      	adds	r2, #4

080003c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c8:	d3fb      	bcc.n	80003c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003ca:	f7ff ffd7 	bl	800037c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003ce:	f000 f825 	bl	800041c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003d2:	f7ff feff 	bl	80001d4 <main>
  bx  lr    
 80003d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80003d8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003e4:	08000484 	.word	0x08000484
  ldr r2, =_sbss
 80003e8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003ec:	20000024 	.word	0x20000024

080003f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003f0:	e7fe      	b.n	80003f0 <ADC_IRQHandler>
	...

080003f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003f8:	4b06      	ldr	r3, [pc, #24]	; (8000414 <HAL_IncTick+0x20>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	461a      	mov	r2, r3
 80003fe:	4b06      	ldr	r3, [pc, #24]	; (8000418 <HAL_IncTick+0x24>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4413      	add	r3, r2
 8000404:	4a04      	ldr	r2, [pc, #16]	; (8000418 <HAL_IncTick+0x24>)
 8000406:	6013      	str	r3, [r2, #0]
}
 8000408:	bf00      	nop
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	20000000 	.word	0x20000000
 8000418:	20000020 	.word	0x20000020

0800041c <__libc_init_array>:
 800041c:	b570      	push	{r4, r5, r6, lr}
 800041e:	4d0d      	ldr	r5, [pc, #52]	; (8000454 <__libc_init_array+0x38>)
 8000420:	4c0d      	ldr	r4, [pc, #52]	; (8000458 <__libc_init_array+0x3c>)
 8000422:	1b64      	subs	r4, r4, r5
 8000424:	10a4      	asrs	r4, r4, #2
 8000426:	2600      	movs	r6, #0
 8000428:	42a6      	cmp	r6, r4
 800042a:	d109      	bne.n	8000440 <__libc_init_array+0x24>
 800042c:	4d0b      	ldr	r5, [pc, #44]	; (800045c <__libc_init_array+0x40>)
 800042e:	4c0c      	ldr	r4, [pc, #48]	; (8000460 <__libc_init_array+0x44>)
 8000430:	f000 f818 	bl	8000464 <_init>
 8000434:	1b64      	subs	r4, r4, r5
 8000436:	10a4      	asrs	r4, r4, #2
 8000438:	2600      	movs	r6, #0
 800043a:	42a6      	cmp	r6, r4
 800043c:	d105      	bne.n	800044a <__libc_init_array+0x2e>
 800043e:	bd70      	pop	{r4, r5, r6, pc}
 8000440:	f855 3b04 	ldr.w	r3, [r5], #4
 8000444:	4798      	blx	r3
 8000446:	3601      	adds	r6, #1
 8000448:	e7ee      	b.n	8000428 <__libc_init_array+0xc>
 800044a:	f855 3b04 	ldr.w	r3, [r5], #4
 800044e:	4798      	blx	r3
 8000450:	3601      	adds	r6, #1
 8000452:	e7f2      	b.n	800043a <__libc_init_array+0x1e>
 8000454:	0800047c 	.word	0x0800047c
 8000458:	0800047c 	.word	0x0800047c
 800045c:	0800047c 	.word	0x0800047c
 8000460:	08000480 	.word	0x08000480

08000464 <_init>:
 8000464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000466:	bf00      	nop
 8000468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800046a:	bc08      	pop	{r3}
 800046c:	469e      	mov	lr, r3
 800046e:	4770      	bx	lr

08000470 <_fini>:
 8000470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000472:	bf00      	nop
 8000474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000476:	bc08      	pop	{r3}
 8000478:	469e      	mov	lr, r3
 800047a:	4770      	bx	lr
